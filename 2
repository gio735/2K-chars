using System;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            string password = Console.ReadLine();
            Console.WriteLine(ValidatePassword(password));
        }

        public static bool ValidatePassword(string password)
        {
            bool validLength = password.Length > 6 && password.Length < 24;
            bool doesntContainNonSupportedChar = NotContainUnsupportedSpec(password);
            bool containsCap = ContainsCapital(password);
            bool containsLower = ContainsLowerCase(password);
            bool containsint = ContainsNumber(password);
            bool isntRepeated = DoesntRepeat(password);
            if (validLength && doesntContainNonSupportedChar && containsCap && containsLower && containsint && isntRepeated)
            {
                
                return true;
            }
            else
            {
                if (!validLength)
                {
                    Console.WriteLine("Invalid length (must be more than 7 and less than 24 character");
                }
                if (!doesntContainNonSupportedChar)
                {
                    Console.WriteLine("Your password contains special character which is not supported.\n Supported special characters: '!', '@', '#', '$', '^', '&', '*', '(', ')', '+', '=', '-', '_', '{', '}', '[', ']', ':', ';', '\'', '\"', '?', '<', '>', ',', '.' ");
                }
                if (!containsCap)
                {
                    Console.WriteLine("Password must contain at least one capital character");
                }
                if (!containsLower)
                {
                    Console.WriteLine("Password must contain at least one lower case character");
                }
                if (!containsint)
                {
                    Console.WriteLine("Password must contain at least one integer");
                }
                if (!isntRepeated)
                {
                    Console.WriteLine("Password must not repeat same character more than twice in row");
                }
                return false;
            }
        }
        private static bool ContainsCapital(string target)
        {
            char[] charPass = target.ToCharArray();
            foreach (char character in charPass)
            {
                if (char.IsUpper(character))
                {
                    return true;
                }
            }
            return false;
        }
        private static bool ContainsLowerCase(string target)
        {
            char[] charPass = target.ToCharArray();
            foreach (char character in charPass)
            {
                if (char.IsLower(character))
                {
                    return true;
                }
            }
            return false;
        }
        private static bool ContainsNumber(string target)
        {
            char[] charPass = target.ToCharArray();
            foreach (char character in charPass)
            {
                if (char.IsDigit(character))
                {
                    return true;
                }
            }
            return false;
        }
        private static bool DoesntRepeat(string target)
        {
            char[] charPass = target.ToCharArray();
            int index = 0;
            int streak = 0;
            for (int length = charPass.Length; index < length - 1; index++)
            {
                if (charPass[index] == charPass[index + 1])
                {
                    streak++;
                }
                else
                {
                    streak = 0;
                }
                if (streak > 2)
                {
                    return false;
                }
            }
            return true;
        }
        private static bool NotContainUnsupportedSpec(string target)
        {
            char[] supportedSpecs = { '!', '@', '#', '$', '^', '&', '*', '(', ')', '+', '=', '-', '_', '{', '}', '[', ']', ':', ';', '\'', '\"', '?', '<', '>', ',', '.' };
            char[] charPass = target.ToCharArray();
            foreach (char character in charPass)
            {
                
                if (char.IsSymbol(character))
                {
                    bool end = false;
                    foreach (char specie in supportedSpecs)
                    {
                        if (specie == character)
                        {
                            end = true;
                            break;
                        }
                    }
                    if (end == false)
                    {
                        return false;
                    }
                }
            }
            return true;
        }
    }
}
